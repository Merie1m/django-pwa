from celery import shared_task
from .models import OfflineAsset, PushSubscription
import requests
from pywebpush import webpush, WebPushException

# üîπ T√¢che 1 : Pr√©-cacher les fichiers PWA (OfflineAsset)
@shared_task
def precache_assets():
    """
    Cette t√¢che t√©l√©charge chaque URL enregistr√©e dans le mod√®le OfflineAsset
    pour forcer leur mise en cache par le service worker.
    """
    assets = OfflineAsset.objects.all()
    for asset in assets:
        try:
            # Simule une requ√™te GET pour forcer le serveur √† servir l'asset
            response = requests.get(asset.url, timeout=10)

            # V√©rifie que le fichier est bien accessible (code HTTP 200)
            if response.status_code == 200:
                print(f"[‚úì] Asset '{asset.name}' pr√©cach√© avec succ√®s.")
            else:
                print(f"[!] √âchec pr√©caching '{asset.name}' (code {response.status_code})")

        except Exception as e:
            print(f"[‚úó] Erreur lors du pr√©caching de '{asset.name}': {e}")


# üîπ T√¢che 2 : Envoyer des notifications push √† tous les abonn√©s
@shared_task
def send_push_notification(title, message):
    """
    Cette t√¢che envoie une notification push contenant `title` et `message`
    √† tous les abonn√©s enregistr√©s dans le mod√®le PushSubscription.
    """
    subscriptions = PushSubscription.objects.all()

    for sub in subscriptions:
        try:
            # Pr√©parer les donn√©es du push
            payload = {
                "title": title,
                "body": message
            }

            # Envoi du push via webpush
            webpush(
                subscription_info={
                    "endpoint": sub.endpoint,
                    "keys": {
                        "p256dh": sub.p256dh,
                        "auth": sub.auth
                    }
                },
                data=json.dumps(payload),  # corps de la notification (JSON)
                vapid_private_key="chemin/vers/vapid_private.pem",  # √† modifier selon ton chemin
                vapid_claims={
                    "sub": "mailto:ton.email@exemple.com"  # obligatoire pour l'identit√©
                }
            )

            print(f"[‚úì] Notification envoy√©e √† {sub.endpoint}")

        except WebPushException as e:
            print(f"[‚úó] Erreur d'envoi √† {sub.endpoint}: {e}")

        except Exception as e:
            print(f"[!] Autre erreur: {e}")
